#!/usr/bin/env python3


import argparse
import json
import os
import usb

from liquidctl.driver.usb import PyUsbHid

VENDOR = 0x1e71
PRODUCT = 0x170e

from krakenx.color_change import KrakenX52

def _color(arg):
    try:
        result = tuple(int(c) for c in arg.split(','))
        if len(result) != 3:
            raise ValueError
    except ValueError:
        raise argparse.ArgumentTypeError("colors must be in r,g,b format")
    else:
        return result

def _color_mode(arg):
    for mode in KrakenX52.COLOR_MODES:
        if arg.lower() == mode.name.lower():
            return mode
    raise argparse.ArgumentTypeError(
        "color mode must one of: "
        + ", ".join(mode.name for mode in KrakenX52.COLOR_MODES))


def _color_channel(arg):
    norm = arg.lower().capitalize()
    if norm in KrakenX52.COLOR_CHANNELS:
        return norm
    else:
        raise argparse.ArgumentTypeError(
            "color channel must one of: "
            + ", ".join(KrakenX52.COLOR_CHANNELS.keys()))

def main(parser):
    parser.add_argument('-m', '--mode', dest='mode',
                        type=_color_mode, default=KrakenX52.MODE_SOLID,
                        help="Color mode: " + ", ".join(mode.name for mode in KrakenX52.COLOR_MODES))

    parser.add_argument('-ch', '--color_channel', dest='color_channel',
                        type=_color_channel, default='Both',
                        help="Color channel: " + ", ".join(KrakenX52.COLOR_CHANNELS.keys()))

    parser.add_argument('-c', '--text_color', dest='text_color', type=_color,
                        default=(255, 0, 0), help="Color in r,g,b format")

    parser.add_argument('-c0', '--color0', dest='color0', type=_color,
                        default=(255, 0, 0), help="Color in r,g,b format")

    parser.add_argument('-c1', '--color1', dest='color1', type=_color,
                        default=(255, 0, 0), help="Color in r,g,b format")

    parser.add_argument('-c2', '--color2', dest='color2', type=_color,
                        default=(255, 0, 0), help="Color in r,g,b format")

    parser.add_argument('-c3', '--color3', dest='color3', type=_color,
                        default=(255, 0, 0), help="Color in r,g,b format")

    parser.add_argument('-c4', '--color4', dest='color4', type=_color,
                        default=(255, 0, 0), help="Color in r,g,b format")

    parser.add_argument('-c5', '--color5', dest='color5', type=_color,
                        default=(255, 0, 0), help="Color in r,g,b format")

    parser.add_argument('-c6', '--color6', dest='color6', type=_color,
                        default=(255, 0, 0), help="Color in r,g,b format")

    parser.add_argument('-c7', '--color7', dest='color7', type=_color,
                        default=(255, 0, 0), help="Color in r,g,b format")

    parser.add_argument('-cc', '--color_count', dest='color_count', type=int, default=1)

    parser.add_argument('-as', '--animation_speed', dest='aspeed', type=int, default=0,
                        help="Speed between 0 and 4")

    parser.add_argument('-fs', '--fan_speed', dest='fspeed', default=[(20, 25), (30, 55), (36,75), (40, 85), (50, 100)],
                        help="Fan speed between 25 and 100; fixed value or comma-separated (temperature,percentage) pairs")

    parser.add_argument('-ps', '--pump_speed', dest='pspeed', default=[(30, 60), (36, 90), (40, 100)],
                        help="Pump speed between 60 and 100; fixed value or comma-separated (temperature,percentage) pairs")

    parser.add_argument('-s', '--status', action='store_true', help="Print pump status, does not update if set.")


    args = parser.parse_args()
    varg = vars(args)

    devices = list(PyUsbHid.enumerate(usb, VENDOR, PRODUCT))

    for dev in devices:
      cooler = KrakenX52(dev, **varg)
      cooler.connect()
      try:
        if args.status:
          cooler.print_status()
        else:
          cooler.update()
      finally:
        cooler.disconnect()

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    main(parser)
